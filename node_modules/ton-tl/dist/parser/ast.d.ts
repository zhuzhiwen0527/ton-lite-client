/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
export declare type TLProgram = {
    start: {
        offset: number;
        line: number;
        column: number;
    };
    end: {
        offset: number;
        line: number;
        column: number;
    };
    type: 'TLProgram';
    constructors: ConstructorDeclarations;
    functions: FunctionDeclarations;
};
export declare type ConstructorDeclarations = {
    start: {
        offset: number;
        line: number;
        column: number;
    };
    end: {
        offset: number;
        line: number;
        column: number;
    };
    type: 'ConstructorDeclarations';
    declarations: Declaration[];
};
export declare type FunctionDeclarations = {
    start: {
        offset: number;
        line: number;
        column: number;
    };
    end: {
        offset: number;
        line: number;
        column: number;
    };
    type: 'FunctionDeclarations';
    declarations: Declaration[];
};
export declare type Declaration = CombinatorDeclaration | BuiltinCombinatorDeclaration | PartialApplicationDeclaration | FinalDeclaration;
export declare type CombinatorDeclaration = {
    start: {
        offset: number;
        line: number;
        column: number;
    };
    end: {
        offset: number;
        line: number;
        column: number;
    };
    type: 'CombinatorDeclaration';
    id: FullCombinatorIdentifier;
    optionalArgs: OptionalArgument[];
    args: Argument[];
    bang: boolean;
    resultType: ResultType;
};
export declare type PartialApplicationDeclaration = PartialTypeApplicationDeclaration | PartialCombinatorApplicationDeclaration;
export declare type PartialTypeApplicationDeclaration = {
    start: {
        offset: number;
        line: number;
        column: number;
    };
    end: {
        offset: number;
        line: number;
        column: number;
    };
    type: 'PartialTypeApplicationDeclaration';
    expression: EExpression;
};
export declare type PartialCombinatorApplicationDeclaration = {
    start: {
        offset: number;
        line: number;
        column: number;
    };
    end: {
        offset: number;
        line: number;
        column: number;
    };
    type: 'PartialCombinatorApplicationDeclaration';
    id: CombinatorIdentifier;
    expression: EExpression;
};
export declare type FinalDeclaration = {
    start: {
        offset: number;
        line: number;
        column: number;
    };
    end: {
        offset: number;
        line: number;
        column: number;
    };
    type: 'FinalDeclaration';
    finalization: 'New' | 'Final' | 'Empty';
    id: BoxedTypeIdentifier;
};
export declare type FullCombinatorIdentifier = FullCombinatorName | CombinatorIdentifier;
export declare type CombinatorIdentifier = ShortCombinatorName | EmptyCombinatorName;
export declare type FullCombinatorName = {
    start: {
        offset: number;
        line: number;
        column: number;
    };
    end: {
        offset: number;
        line: number;
        column: number;
    };
    type: 'FullCombinatorName';
    name: string;
    magic: string;
};
export declare type ShortCombinatorName = {
    start: {
        offset: number;
        line: number;
        column: number;
    };
    end: {
        offset: number;
        line: number;
        column: number;
    };
    type: 'ShortCombinatorName';
    name: string;
};
export declare type EmptyCombinatorName = {
    start: {
        offset: number;
        line: number;
        column: number;
    };
    end: {
        offset: number;
        line: number;
        column: number;
    };
    type: 'EmptyCombinatorName';
    name: string;
};
export declare type TypeIdentifier = BoxedTypeIdentifier | SimpleTypeIdentifier | HashTypeIdentifier;
export declare type BoxedTypeIdentifier = {
    start: {
        offset: number;
        line: number;
        column: number;
    };
    end: {
        offset: number;
        line: number;
        column: number;
    };
    type: 'BoxedTypeIdentifier';
    name: string;
};
export declare type SimpleTypeIdentifier = {
    start: {
        offset: number;
        line: number;
        column: number;
    };
    end: {
        offset: number;
        line: number;
        column: number;
    };
    type: 'SimpleTypeIdentifier';
    name: string;
};
export declare type HashTypeIdentifier = {
    start: {
        offset: number;
        line: number;
        column: number;
    };
    end: {
        offset: number;
        line: number;
        column: number;
    };
    type: 'HashTypeIdentifier';
    name: string;
};
export declare type OptionalVariableIdentifier = VariableIdentifier | EmptyVariableIdentifier;
export declare type VariableIdentifier = {
    start: {
        offset: number;
        line: number;
        column: number;
    };
    end: {
        offset: number;
        line: number;
        column: number;
    };
    type: 'VariableIdentifier';
    name: string;
};
export declare type EmptyVariableIdentifier = {
    start: {
        offset: number;
        line: number;
        column: number;
    };
    end: {
        offset: number;
        line: number;
        column: number;
    };
    type: 'EmptyVariableIdentifier';
    name: string;
};
export declare type TypeExpression = {
    start: {
        offset: number;
        line: number;
        column: number;
    };
    end: {
        offset: number;
        line: number;
        column: number;
    };
    type: 'TypeExpression';
    expression: Expression;
};
export declare type NatExpression = {
    start: {
        offset: number;
        line: number;
        column: number;
    };
    end: {
        offset: number;
        line: number;
        column: number;
    };
    type: 'NatExpression';
    expression: Expression;
};
export declare type Expression = ETypeIdentifier | ENat | EOperator | EExpression | EMultiArg;
export declare type ETypeIdentifier = {
    start: {
        offset: number;
        line: number;
        column: number;
    };
    end: {
        offset: number;
        line: number;
        column: number;
    };
    type: 'ETypeIdentifier';
    id: TypeIdentifier;
};
export declare type ENat = {
    start: {
        offset: number;
        line: number;
        column: number;
    };
    end: {
        offset: number;
        line: number;
        column: number;
    };
    type: 'ENat';
    value: number;
};
export declare type EOperator = {
    start: {
        offset: number;
        line: number;
        column: number;
    };
    end: {
        offset: number;
        line: number;
        column: number;
    };
    type: 'EOperator';
    kind: '%' | '!' | '+';
    expression: Expression;
};
export declare type EExpression = {
    start: {
        offset: number;
        line: number;
        column: number;
    };
    end: {
        offset: number;
        line: number;
        column: number;
    };
    type: 'EExpression';
    subexpressions: Expression[];
};
export declare type EMultiArg = {
    start: {
        offset: number;
        line: number;
        column: number;
    };
    end: {
        offset: number;
        line: number;
        column: number;
    };
    type: 'EMultiArg';
    multiplicity: NatExpression | null;
    subargs: Argument[];
};
export declare type OptionalArgument = {
    start: {
        offset: number;
        line: number;
        column: number;
    };
    end: {
        offset: number;
        line: number;
        column: number;
    };
    type: 'OptionalArgument';
    id: VariableIdentifier;
    argType: TypeExpression;
};
export declare type Argument = {
    start: {
        offset: number;
        line: number;
        column: number;
    };
    end: {
        offset: number;
        line: number;
        column: number;
    };
    type: 'Argument';
    id: OptionalVariableIdentifier;
    conditionalDef: ConditionalDefinition | null;
    argType: TypeExpression;
};
export declare type ConditionalDefinition = {
    start: {
        offset: number;
        line: number;
        column: number;
    };
    end: {
        offset: number;
        line: number;
        column: number;
    };
    type: 'ConditionalDefinition';
    id: VariableIdentifier;
    nat: number | null;
};
export declare type ResultType = {
    start: {
        offset: number;
        line: number;
        column: number;
    };
    end: {
        offset: number;
        line: number;
        column: number;
    };
    type: 'ResultType';
    id: BoxedTypeIdentifier;
    expression: EExpression;
};
export declare type BuiltinCombinatorDeclaration = {
    start: {
        offset: number;
        line: number;
        column: number;
    };
    end: {
        offset: number;
        line: number;
        column: number;
    };
    type: 'BuiltinCombinatorDeclaration';
    id: FullCombinatorIdentifier;
    result: BoxedTypeIdentifier;
};
