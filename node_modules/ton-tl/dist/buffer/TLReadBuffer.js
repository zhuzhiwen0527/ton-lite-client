"use strict";
/**
 * Copyright (c) Whales Corp.
 * All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TLReadBuffer = void 0;
const bn_js_1 = __importDefault(require("bn.js"));
class TLReadBuffer {
    #offset = 0;
    #buf;
    constructor(buf) {
        this.#buf = buf;
    }
    #ensureSize(needBytes) {
        if (this.#offset + needBytes > this.#buf.byteLength) {
            throw new Error('Not enough bytes');
        }
    }
    readInt32() {
        this.#ensureSize(4);
        let val = this.#buf.readInt32LE(this.#offset);
        this.#offset += 4;
        return val;
    }
    readUInt32() {
        this.#ensureSize(4);
        let val = this.#buf.readUInt32LE(this.#offset);
        this.#offset += 4;
        return val;
    }
    readInt64() {
        this.#ensureSize(8);
        let buff = this.#buf.slice(this.#offset, this.#offset + 8);
        this.#offset += 8;
        let inv = false;
        if (buff[buff.length - 1] & 128) {
            inv = true;
            buff[buff.length - 1] = buff[buff.length - 1] & 127;
        }
        let base = new bn_js_1.default(buff, 'le');
        if (inv) {
            return base.sub(new bn_js_1.default(Buffer.from([0, 0, 0, 0, 0, 0, 0, 128]), 'le')).toString(10);
        }
        else {
            return base.toString(10);
        }
    }
    readUInt8() {
        this.#ensureSize(1);
        let val = this.#buf.readUint8(this.#offset);
        this.#offset++;
        return val;
    }
    readInt256() {
        this.#ensureSize(256 / 8);
        let buff = this.#buf.slice(this.#offset, this.#offset + 256 / 8);
        this.#offset += 256 / 8;
        return buff;
    }
    readBuffer() {
        let size = 1;
        let len = this.readUInt8();
        if (len === 254) {
            len = this.#buf.readUintLE(this.#offset, 3);
            this.#offset += 3;
            size += 3;
        }
        size += len;
        let buff = this.#buf.slice(this.#offset, this.#offset + len);
        this.#offset += len;
        while (size % 4 !== 0) {
            this.readUInt8();
            size += 1;
        }
        return buff;
    }
    readString() {
        return this.readBuffer().toString('utf-8');
    }
    readBool() {
        let v = this.readUInt32();
        if (v === 0xbc799737) {
            return false;
        }
        if (v === 0x997275b5) {
            return true;
        }
        throw Error('Unknown boolean value');
    }
    readVector(codec) {
        let count = this.readUInt32();
        let res = [];
        for (let i = 0; i < count; i++) {
            res.push(codec(this));
        }
        return res;
    }
    readObject() {
        let len = this.#buf.length - this.#offset;
        let buff = this.#buf.slice(this.#offset, this.#offset + len);
        this.#offset += len;
        return buff;
    }
}
exports.TLReadBuffer = TLReadBuffer;
